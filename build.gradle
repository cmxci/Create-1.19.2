//file:noinspection GradlePackageVersionRange
//file:noinspection GrMethodMayBeStatic
plugins {
    id "fabric-loom" version "1.0.+"
    id "maven-publish"
    id "io.github.juuxel.loom-quiltflower" version "1.+" // Quiltflower, a better decompiler
    id "io.github.p03w.machete" version "1.1.4" // automatic jar compressing on build
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

String buildNumber = System.getenv("GITHUB_RUN_NUMBER")
version = mod_version + (buildNumber != null ? "-${buildNumber}" : "")

group = project.maven_group
archivesBaseName = "create-fabric-${project.minecraft_version}"

repositories {
    mavenCentral()
    mavenLocal()
    maven { url = "https://maven.quiltmc.org/repository/release" }
    maven { url = "https://hephaestus.dev/release" }
    maven { url = "https://api.modrinth.com/maven" }
    maven { url = "https://cursemaven.com" }
    maven { url = "https://maven.parchmentmc.org" }
    maven { url = "https://maven.fabricmc.net/" }
    maven { url = "https://maven.tterrag.com/" }
    maven { url = "https://storage.googleapis.com/devan-maven/" }
    maven { url = "https://maven.shedaniel.me/" }
    maven { url = "https://aperlambda.github.io/maven" }
    maven { url = "https://ladysnake.jfrog.io/artifactory/mods" }
    maven { url = "https://maven.kotlindiscord.com/repository/terraformers/" }
    maven { url = "https://mvn.devos.one/releases/" }
    maven { url = "https://mvn.devos.one/snapshots/" }
    maven { url = "https://maven.terraformersmc.com/" }
    maven { url = "https://maven.cafeteria.dev/releases/" }
    maven { url = "https://jitpack.io/" }
    maven { url = "https://maven.gegy.dev" }
    maven { url = "https://dvs1.progwml6.com/files/maven/" }
    maven { url = "https://modmaven.dev" }
    maven {
        url = "https://maven.jamieswhiteshirt.com/libs-release"
        content {
            includeGroup("com.jamieswhiteshirt")
        }
    }
}

dependencies {
    setup(dependencies)
    devEnv(dependencies)
    compat(dependencies)
    dependencies(dependencies)
    String useTestMods = project.test_mods
    if (useTestMods == "true") {
        testMods(dependencies)
    }
}

// actual dependencies for Create
def dependencies(DependencyHandler deps) {
    deps.modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")

    deps.modImplementation(deps.include("io.github.fabricators_of_create.Porting-Lib:porting-lib:${project.port_lib_version}+${project.minecraft_version}"))
    deps.modImplementation(deps.include("me.alphamode:ForgeTags:${project.forge_tags_version}"))
    deps.modImplementation(deps.include("com.electronwill.night-config:core:${project.night_config_core_version}"))
    deps.modImplementation(deps.include("com.electronwill.night-config:toml:${project.night_config_toml_version}"))
    deps.modImplementation(deps.include("curse.maven:forge-config-api-port-fabric-547434:${project.config_api_id}"))
    deps.modImplementation(deps.include("com.tterrag.registrate_fabric:Registrate:${project.registrate_version}"))
    deps.modImplementation(deps.include("com.jozufozu.flywheel:flywheel-fabric-${flywheel_minecraft_version}:${project.flywheel_version}"))
    deps.modImplementation(deps.include("com.jamieswhiteshirt:reach-entity-attributes:${project.reach_entity_attributes_version}"))
    deps.modImplementation(deps.include("dev.cafeteria:fake-player-api:${project.fake_player_api_version}"))
    deps.modImplementation(deps.include("io.github.tropheusj:milk-lib:${project.milk_lib_version}"))
    deps.modImplementation(deps.include("me.luligabi:NoIndium:${project.no_indium_version}"))
    deps.implementation(deps.include("com.google.code.findbugs:jsr305:${project.jsr305_version}"))
}

// initial project setup
def setup(DependencyHandler deps) {
    deps.minecraft("com.mojang:minecraft:${project.minecraft_version}")
    deps.mappings(loom.layered {
        it.mappings("org.quiltmc:quilt-mappings:${project.minecraft_version}+build.${project.qm_version}:intermediary-v2")
        it.parchment("org.parchmentmc.data:parchment-${project.minecraft_version}:${project.parchment_version}@zip")
        it.officialMojangMappings { nameSyntheticMembers = false }
    })
    deps.modImplementation("net.fabricmc:fabric-loader:${project.loader_version}")
}

// setup mods that enhance development
def devEnv(DependencyHandler deps) {
    deps.modLocalRuntime("maven.modrinth:lazydfu:0.1.3")
    deps.modLocalRuntime("maven.modrinth:lithium:mc1.19.2-0.10.0")
    // used to prevent forge config api port from complaining
    deps.modImplementation("com.github.AlphaMode:fakeconfig:master-SNAPSHOT") { exclude(group: "net.fabricmc.fabric-api") }
    deps.modImplementation("com.github.AlphaMode:fakeconfigtoml:master-SNAPSHOT") { exclude(group: "net.fabricmc.fabric-api") }
}

// setup mods that are available for compatibility reasons
def compat(DependencyHandler deps) {
    recipeViewers(deps)
    deps.modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}")
    deps.modCompileOnly("maven.modrinth:sandwichable:1.3.a+1.19")
    deps.modImplementation("dev.emi:trinkets:${project.trinkets_version}") //{ exclude(group: "com.terraformersmc") }
}

// setup the three recipe viewer mods
def recipeViewers(DependencyHandler deps) {
    // EMI
    deps.modCompileOnly("dev.emi:emi:${project.emi_version}") { transitive = false }
    // JEI
    // FIXME remapping issues with API jar
//    deps.modCompileOnly("mezz.jei:jei-${project.minecraft_version}-common-api:${project.jei_version}") { transitive = false }
//    deps.modCompileOnly("mezz.jei:jei-${project.minecraft_version}-fabric-api:${project.jei_version}") { transitive = false }
    deps.modCompileOnly("mezz.jei:jei-${project.minecraft_version}-fabric:${project.jei_version}") { transitive = false }
    // REI
    deps.modCompileOnly("me.shedaniel.cloth:basic-math:0.6.0") { transitive = false }
    deps.modCompileOnly("dev.architectury:architectury-fabric:${project.architectury_version}") { transitive = false }
    deps.modCompileOnly("me.shedaniel:RoughlyEnoughItems-api-fabric:${project.rei_version}") { transitive = false }
    deps.modCompileOnly("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}") { transitive = false }

    String recipeViewer = project.recipe_viewer
    if (recipeViewer == "emi") {
        deps.modLocalRuntime("dev.emi:emi:${project.emi_version}") { transitive = false }
    } else if (recipeViewer == "jei") {
        deps.modLocalRuntime("mezz.jei:jei-${project.minecraft_version}-fabric:${project.jei_version}") { transitive = false }
    } else if (recipeViewer == "rei") {
        deps.modLocalRuntime("me.shedaniel.cloth:basic-math:0.6.0") { transitive = false }
        deps.modLocalRuntime("dev.architectury:architectury-fabric:${project.architectury_version}") { transitive = false }
        deps.modLocalRuntime("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") { exclude(group: "net.fabricmc.fabric-api"); transitive = false }
        deps.modLocalRuntime("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}") { transitive = false }
    } else {
        println("unknown recipe viewer: $recipeViewer")
    }
}

// mods that can be uncommented to test in development
def testMods(DependencyHandler deps) {
//    modLocalRuntime("dev.monarkhes:myron:1.6.3+1.18.1") { transitive = false }
//
//    deps.modLocalRuntime("maven.modrinth:kibe:1.9.7-BETA+1.18") { transitive = false }
//    deps.modLocalRuntime("io.github.ladysnake:PlayerAbilityLib:1.5.0") { transitive = false }
//    deps.modLocalRuntime("net.fabricmc:fabric-language-kotlin:1.8.0+kotlin.1.7.0")
//
//    deps.modLocalRuntime("maven.modrinth:better-biome-blend:1.18.2-1.3.5-fabric")
//
//    deps.modLocalRuntime("maven.modrinth:sandwichable:1.2+1.18.2")
//    deps.modLocalRuntime("maven.modrinth:mealapi:0.3+1.18")
//    deps.modLocalRuntime("dev.lambdaurora:spruceui:3.3.1+1.17")
//
    deps.modLocalRuntime("maven.modrinth:sodium:mc1.19.2-0.4.4")
    deps.modLocalRuntime("org.joml:joml:1.10.4")

    deps.modLocalRuntime("maven.modrinth:indium:1.0.9+mc1.19.2")
//
//    deps.modLocalRuntime("maven.modrinth:phosphor:mc1.18.x-0.8.1")
//
//    deps.modLocalRuntime("maven.modrinth:starlight:1.0.2+1.18.2")
//
//    deps.modLocalRuntime("vazkii.botania:Botania:1.18.2-434-FABRIC")
//
//    deps.modLocalRuntime("curse.maven:nbt-crafting-314633:3707208") { transitive = false }
//
//    deps.modLocalRuntime("curse.maven:alloygery-573592:3847602") { transitive = false }
//
//    deps.modLocalRuntime("curse.maven:xl-packets-fabric-390168:3527187") { transitive = false }
}

machete {
    if (buildNumber == null) {
        enabled = false // don't optimize local builds
    }
}

task buildOrPublish {
    group = "build"
    String mavenUser = System.getenv().MAVEN_USER
    if (mavenUser != null && !mavenUser.isEmpty()) {
        dependsOn(tasks.getByName("publish"))
        println("prepared for publish")
    } else {
        dependsOn(tasks.getByName("build"))
        println("prepared for build")
    }
}

loom {
    accessWidenerPath = file("src/main/resources/create.accesswidener")
    sourceSets {
        main {
            resources {
                srcDir("src/generated/resources")
                exclude("src/generated/resources/.cache")
            }
        }
    }

    runs {
        datagen {
            client()

            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}"
            vmArg "-Dfabric-api.datagen.modid=create"
            // from ae2
            property "com.simibubi.create.existingData", file("src/main/resources").absolutePath

            runDir "build/datagen"
        }
    }
}

processResources {
    exclude("**/*.bbmodel", "**/*.lnk")

    Map<String, String> properties = new HashMap<>()
    properties.put("version", project.version)
    properties.put("loader_version", project.loader_version)
    properties.put("fabric_version", project.fabric_version)
    properties.put("minecraft_version", project.minecraft_version)
    properties.put("java_version", sourceCompatibility)
    properties.put("registrate_version", project.registrate_version)
    properties.put("flywheel_version", project.flywheel_version)
//    properties.put("port_lib_version", "${project.port_lib_version}+${project.minecraft_version}.${project.port_lib_hash}")
    properties.put("port_lib_version", "${project.port_lib_version}+${project.minecraft_version}")
    properties.put("forge_tags_version", project.forge_tags_version)
    properties.put("forge_config_api_port_version", project.forge_config_api_port_version)
    properties.put("reach_entity_attributes_version", project.reach_entity_attributes_version)
    properties.put("fake_player_api_version", project.fake_player_api_version)
    properties.put("milk_lib_version", project.milk_lib_version)
    properties.put("night_config_core_version", project.night_config_core_version)
    properties.put("night_config_toml_version", project.night_config_toml_version)

    properties.forEach((k, v) -> inputs.property(k, v))

    filesMatching("fabric.mod.json") {
        expand properties
    }

    filesMatching("create.mixins.json") {
        expand "archivesBaseName": archivesBaseName
    }

    duplicatesStrategy = DuplicatesStrategy.WARN
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = Integer.parseInt(sourceCompatibility)
}

java {
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = archivesBaseName
            from components.java
        }
    }

    repositories {
        maven {
            url = "https://mvn.devos.one/${System.getenv().PUBLISH_SUFFIX}/"
            credentials {
                username = System.getenv().MAVEN_USER
                password = System.getenv().MAVEN_PASS
            }
            authentication { basic(BasicAuthentication) }
        }
    }
}
